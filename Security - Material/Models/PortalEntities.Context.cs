//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Security___Material.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PortalEntities : DbContext
    {
        public PortalEntities()
            : base("name=PortalEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Attachment> Attachment { get; set; }
        public virtual DbSet<HrDeptMaster> HrDeptMaster { get; set; }
        public virtual DbSet<HrDeptMasterFull> HrDeptMasterFull { get; set; }
        public virtual DbSet<HrEmpMaster> HrEmpMaster { get; set; }
        public virtual DbSet<SysAuthorization> SysAuthorization { get; set; }
        public virtual DbSet<SysCategory> SysCategory { get; set; }
        public virtual DbSet<SysCategoryValue> SysCategoryValue { get; set; }
        public virtual DbSet<SysLogHistory> SysLogHistory { get; set; }
        public virtual DbSet<SysMenu> SysMenu { get; set; }
        public virtual DbSet<SysRole> SysRole { get; set; }
        public virtual DbSet<SysRoleMapping> SysRoleMapping { get; set; }
        public virtual DbSet<SysUser> SysUser { get; set; }
        public virtual DbSet<SysUserMapping> SysUserMapping { get; set; }
        public virtual DbSet<ApplicationConfig> ApplicationConfig { get; set; }
        public virtual DbSet<SystemRole> SystemRole { get; set; }
        public virtual DbSet<ForgetCard> ForgetCard { get; set; }
        public virtual DbSet<PassingGoodsDetail> PassingGoodsDetail { get; set; }
        public virtual DbSet<PassingGoodsMaster> PassingGoodsMaster { get; set; }
        public virtual DbSet<Violation> Violation { get; set; }
        public virtual DbSet<VisitorApplicationDetailVehicle> VisitorApplicationDetailVehicle { get; set; }
        public virtual DbSet<ContainerDetail> ContainerDetail { get; set; }
        public virtual DbSet<Vendor> Vendor { get; set; }
        public virtual DbSet<VisitorApplicationMaster> VisitorApplicationMaster { get; set; }
        public virtual DbSet<VisitorApplicationDetailPerson> VisitorApplicationDetailPerson { get; set; }
        public virtual DbSet<VisitorWorkingDaily> VisitorWorkingDaily { get; set; }
        public virtual DbSet<VehicleCheckingDaily> VehicleCheckingDaily { get; set; }
        public virtual DbSet<ContainerTrackingDaily> ContainerTrackingDaily { get; set; }
        public virtual DbSet<Guard> Guard { get; set; }
    
        public virtual ObjectResult<SP_CMS_GET_TREEVIEW_VIA_CATEGORY_Result> SP_CMS_GET_TREEVIEW_VIA_CATEGORY(string cATEGORY, string rOLE)
        {
            var cATEGORYParameter = cATEGORY != null ?
                new ObjectParameter("CATEGORY", cATEGORY) :
                new ObjectParameter("CATEGORY", typeof(string));
    
            var rOLEParameter = rOLE != null ?
                new ObjectParameter("ROLE", rOLE) :
                new ObjectParameter("ROLE", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CMS_GET_TREEVIEW_VIA_CATEGORY_Result>("SP_CMS_GET_TREEVIEW_VIA_CATEGORY", cATEGORYParameter, rOLEParameter);
        }
    
        public virtual ObjectResult<SP_GetMenu_Via_MasterMenu_User_System_Result> SP_GetMenu_Via_MasterMenu_User_System(string masterMenu, string user, Nullable<int> systemId)
        {
            var masterMenuParameter = masterMenu != null ?
                new ObjectParameter("MasterMenu", masterMenu) :
                new ObjectParameter("MasterMenu", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var systemIdParameter = systemId.HasValue ?
                new ObjectParameter("SystemId", systemId) :
                new ObjectParameter("SystemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetMenu_Via_MasterMenu_User_System_Result>("SP_GetMenu_Via_MasterMenu_User_System", masterMenuParameter, userParameter, systemIdParameter);
        }
    
        public virtual ObjectResult<SP_SYS_ATTACHMENT_GET_Result> SP_SYS_ATTACHMENT_GET(string mODULEID, Nullable<int> mASTERID)
        {
            var mODULEIDParameter = mODULEID != null ?
                new ObjectParameter("MODULEID", mODULEID) :
                new ObjectParameter("MODULEID", typeof(string));
    
            var mASTERIDParameter = mASTERID.HasValue ?
                new ObjectParameter("MASTERID", mASTERID) :
                new ObjectParameter("MASTERID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SYS_ATTACHMENT_GET_Result>("SP_SYS_ATTACHMENT_GET", mODULEIDParameter, mASTERIDParameter);
        }
    
        public virtual int SP_SYS_ATTACHMENT_INSERT(string mODULEID, Nullable<int> mASTERID, string fILENAME, string fILEPATH, string fILETYPE, Nullable<int> fILESIZE)
        {
            var mODULEIDParameter = mODULEID != null ?
                new ObjectParameter("MODULEID", mODULEID) :
                new ObjectParameter("MODULEID", typeof(string));
    
            var mASTERIDParameter = mASTERID.HasValue ?
                new ObjectParameter("MASTERID", mASTERID) :
                new ObjectParameter("MASTERID", typeof(int));
    
            var fILENAMEParameter = fILENAME != null ?
                new ObjectParameter("FILENAME", fILENAME) :
                new ObjectParameter("FILENAME", typeof(string));
    
            var fILEPATHParameter = fILEPATH != null ?
                new ObjectParameter("FILEPATH", fILEPATH) :
                new ObjectParameter("FILEPATH", typeof(string));
    
            var fILETYPEParameter = fILETYPE != null ?
                new ObjectParameter("FILETYPE", fILETYPE) :
                new ObjectParameter("FILETYPE", typeof(string));
    
            var fILESIZEParameter = fILESIZE.HasValue ?
                new ObjectParameter("FILESIZE", fILESIZE) :
                new ObjectParameter("FILESIZE", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SYS_ATTACHMENT_INSERT", mODULEIDParameter, mASTERIDParameter, fILENAMEParameter, fILEPATHParameter, fILETYPEParameter, fILESIZEParameter);
        }
    
        public virtual ObjectResult<SP_SYS_DEPT_GET_TREE_Result> SP_SYS_DEPT_GET_TREE(Nullable<int> dEPTID)
        {
            var dEPTIDParameter = dEPTID.HasValue ?
                new ObjectParameter("DEPTID", dEPTID) :
                new ObjectParameter("DEPTID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SYS_DEPT_GET_TREE_Result>("SP_SYS_DEPT_GET_TREE", dEPTIDParameter);
        }
    
        public virtual ObjectResult<SP_SYS_LOG_HISTORY_Result> SP_SYS_LOG_HISTORY(string sUBJECT, Nullable<int> dEPTID, Nullable<System.DateTime> dATEFROM, Nullable<System.DateTime> dATETO)
        {
            var sUBJECTParameter = sUBJECT != null ?
                new ObjectParameter("SUBJECT", sUBJECT) :
                new ObjectParameter("SUBJECT", typeof(string));
    
            var dEPTIDParameter = dEPTID.HasValue ?
                new ObjectParameter("DEPTID", dEPTID) :
                new ObjectParameter("DEPTID", typeof(int));
    
            var dATEFROMParameter = dATEFROM.HasValue ?
                new ObjectParameter("DATEFROM", dATEFROM) :
                new ObjectParameter("DATEFROM", typeof(System.DateTime));
    
            var dATETOParameter = dATETO.HasValue ?
                new ObjectParameter("DATETO", dATETO) :
                new ObjectParameter("DATETO", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SYS_LOG_HISTORY_Result>("SP_SYS_LOG_HISTORY", sUBJECTParameter, dEPTIDParameter, dATEFROMParameter, dATETOParameter);
        }
    
        public virtual int SP_SYS_ROLE_GETUSER(string rOLEID, Nullable<System.Guid> sYSTEMID)
        {
            var rOLEIDParameter = rOLEID != null ?
                new ObjectParameter("ROLEID", rOLEID) :
                new ObjectParameter("ROLEID", typeof(string));
    
            var sYSTEMIDParameter = sYSTEMID.HasValue ?
                new ObjectParameter("SYSTEMID", sYSTEMID) :
                new ObjectParameter("SYSTEMID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SYS_ROLE_GETUSER", rOLEIDParameter, sYSTEMIDParameter);
        }
    
        public virtual ObjectResult<SP_SYS_USER_LIST_Result> SP_SYS_USER_LIST(Nullable<int> sEARCHTYPE, string eMPID, string eMPNAME, Nullable<int> dEPTID, string sEX, string nATION, Nullable<bool> hASEMAIL)
        {
            var sEARCHTYPEParameter = sEARCHTYPE.HasValue ?
                new ObjectParameter("SEARCHTYPE", sEARCHTYPE) :
                new ObjectParameter("SEARCHTYPE", typeof(int));
    
            var eMPIDParameter = eMPID != null ?
                new ObjectParameter("EMPID", eMPID) :
                new ObjectParameter("EMPID", typeof(string));
    
            var eMPNAMEParameter = eMPNAME != null ?
                new ObjectParameter("EMPNAME", eMPNAME) :
                new ObjectParameter("EMPNAME", typeof(string));
    
            var dEPTIDParameter = dEPTID.HasValue ?
                new ObjectParameter("DEPTID", dEPTID) :
                new ObjectParameter("DEPTID", typeof(int));
    
            var sEXParameter = sEX != null ?
                new ObjectParameter("SEX", sEX) :
                new ObjectParameter("SEX", typeof(string));
    
            var nATIONParameter = nATION != null ?
                new ObjectParameter("NATION", nATION) :
                new ObjectParameter("NATION", typeof(string));
    
            var hASEMAILParameter = hASEMAIL.HasValue ?
                new ObjectParameter("HASEMAIL", hASEMAIL) :
                new ObjectParameter("HASEMAIL", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SYS_USER_LIST_Result>("SP_SYS_USER_LIST", sEARCHTYPEParameter, eMPIDParameter, eMPNAMEParameter, dEPTIDParameter, sEXParameter, nATIONParameter, hASEMAILParameter);
        }
    
        public virtual ObjectResult<SP_SYS_USER_LOGIN_Result> SP_SYS_USER_LOGIN(string eMPID, string pASSWORD)
        {
            var eMPIDParameter = eMPID != null ?
                new ObjectParameter("EMPID", eMPID) :
                new ObjectParameter("EMPID", typeof(string));
    
            var pASSWORDParameter = pASSWORD != null ?
                new ObjectParameter("PASSWORD", pASSWORD) :
                new ObjectParameter("PASSWORD", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SYS_USER_LOGIN_Result>("SP_SYS_USER_LOGIN", eMPIDParameter, pASSWORDParameter);
        }
    
        public virtual ObjectResult<SP_SYS_USER_LOGIN_GUARD_Result> SP_SYS_USER_LOGIN_GUARD(string eMPID, string pASSWORD)
        {
            var eMPIDParameter = eMPID != null ?
                new ObjectParameter("EMPID", eMPID) :
                new ObjectParameter("EMPID", typeof(string));
    
            var pASSWORDParameter = pASSWORD != null ?
                new ObjectParameter("PASSWORD", pASSWORD) :
                new ObjectParameter("PASSWORD", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SYS_USER_LOGIN_GUARD_Result>("SP_SYS_USER_LOGIN_GUARD", eMPIDParameter, pASSWORDParameter);
        }
    
        public virtual ObjectResult<SP_EMPLOYEE_INFOR_Result> SP_EMPLOYEE_INFOR(string name, string eMPID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var eMPIDParameter = eMPID != null ?
                new ObjectParameter("EMPID", eMPID) :
                new ObjectParameter("EMPID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_EMPLOYEE_INFOR_Result>("SP_EMPLOYEE_INFOR", nameParameter, eMPIDParameter);
        }
    
        public virtual int SP_FORGETCARD_DELETE(string eMPID, Nullable<System.DateTime> wORKDATE)
        {
            var eMPIDParameter = eMPID != null ?
                new ObjectParameter("EMPID", eMPID) :
                new ObjectParameter("EMPID", typeof(string));
    
            var wORKDATEParameter = wORKDATE.HasValue ?
                new ObjectParameter("WORKDATE", wORKDATE) :
                new ObjectParameter("WORKDATE", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_FORGETCARD_DELETE", eMPIDParameter, wORKDATEParameter);
        }
    
        public virtual ObjectResult<SP_FORGETCARD_GETALL_Result> SP_FORGETCARD_GETALL(Nullable<int> dEPTID, string eMPID, string eMPNAME, string pOSITION, string jOBTITLE, Nullable<System.DateTime> fROMDATE, Nullable<System.DateTime> tODATE)
        {
            var dEPTIDParameter = dEPTID.HasValue ?
                new ObjectParameter("DEPTID", dEPTID) :
                new ObjectParameter("DEPTID", typeof(int));
    
            var eMPIDParameter = eMPID != null ?
                new ObjectParameter("EMPID", eMPID) :
                new ObjectParameter("EMPID", typeof(string));
    
            var eMPNAMEParameter = eMPNAME != null ?
                new ObjectParameter("EMPNAME", eMPNAME) :
                new ObjectParameter("EMPNAME", typeof(string));
    
            var pOSITIONParameter = pOSITION != null ?
                new ObjectParameter("POSITION", pOSITION) :
                new ObjectParameter("POSITION", typeof(string));
    
            var jOBTITLEParameter = jOBTITLE != null ?
                new ObjectParameter("JOBTITLE", jOBTITLE) :
                new ObjectParameter("JOBTITLE", typeof(string));
    
            var fROMDATEParameter = fROMDATE.HasValue ?
                new ObjectParameter("FROMDATE", fROMDATE) :
                new ObjectParameter("FROMDATE", typeof(System.DateTime));
    
            var tODATEParameter = tODATE.HasValue ?
                new ObjectParameter("TODATE", tODATE) :
                new ObjectParameter("TODATE", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_FORGETCARD_GETALL_Result>("SP_FORGETCARD_GETALL", dEPTIDParameter, eMPIDParameter, eMPNAMEParameter, pOSITIONParameter, jOBTITLEParameter, fROMDATEParameter, tODATEParameter);
        }
    
        public virtual ObjectResult<SP_FORGETCARD_GETINFOR_Result> SP_FORGETCARD_GETINFOR(string eMPID, Nullable<System.DateTime> wORKDATE)
        {
            var eMPIDParameter = eMPID != null ?
                new ObjectParameter("EMPID", eMPID) :
                new ObjectParameter("EMPID", typeof(string));
    
            var wORKDATEParameter = wORKDATE.HasValue ?
                new ObjectParameter("WORKDATE", wORKDATE) :
                new ObjectParameter("WORKDATE", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_FORGETCARD_GETINFOR_Result>("SP_FORGETCARD_GETINFOR", eMPIDParameter, wORKDATEParameter);
        }
    
        public virtual ObjectResult<SP_GUARD_GET_Result> SP_GUARD_GET(Nullable<int> iD, Nullable<System.DateTime> fROMDATE, Nullable<System.DateTime> tODATE)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var fROMDATEParameter = fROMDATE.HasValue ?
                new ObjectParameter("FROMDATE", fROMDATE) :
                new ObjectParameter("FROMDATE", typeof(System.DateTime));
    
            var tODATEParameter = tODATE.HasValue ?
                new ObjectParameter("TODATE", tODATE) :
                new ObjectParameter("TODATE", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GUARD_GET_Result>("SP_GUARD_GET", iDParameter, fROMDATEParameter, tODATEParameter);
        }
    
        public virtual int SP_GUARD_INSERT(string nAME, string pASSWORD, string gATE, string rEMARK, string vENDOR, Nullable<bool> iSACTIVE, string uSERID)
        {
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            var pASSWORDParameter = pASSWORD != null ?
                new ObjectParameter("PASSWORD", pASSWORD) :
                new ObjectParameter("PASSWORD", typeof(string));
    
            var gATEParameter = gATE != null ?
                new ObjectParameter("GATE", gATE) :
                new ObjectParameter("GATE", typeof(string));
    
            var rEMARKParameter = rEMARK != null ?
                new ObjectParameter("REMARK", rEMARK) :
                new ObjectParameter("REMARK", typeof(string));
    
            var vENDORParameter = vENDOR != null ?
                new ObjectParameter("VENDOR", vENDOR) :
                new ObjectParameter("VENDOR", typeof(string));
    
            var iSACTIVEParameter = iSACTIVE.HasValue ?
                new ObjectParameter("ISACTIVE", iSACTIVE) :
                new ObjectParameter("ISACTIVE", typeof(bool));
    
            var uSERIDParameter = uSERID != null ?
                new ObjectParameter("USERID", uSERID) :
                new ObjectParameter("USERID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GUARD_INSERT", nAMEParameter, pASSWORDParameter, gATEParameter, rEMARKParameter, vENDORParameter, iSACTIVEParameter, uSERIDParameter);
        }
    
        public virtual int SP_GUARD_UPDATE(string guardId, string nAME, string rEMARK, Nullable<bool> iSACTIVE, Nullable<bool> cHANGEPASS, string nEWPASS, string uSERID)
        {
            var guardIdParameter = guardId != null ?
                new ObjectParameter("GuardId", guardId) :
                new ObjectParameter("GuardId", typeof(string));
    
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            var rEMARKParameter = rEMARK != null ?
                new ObjectParameter("REMARK", rEMARK) :
                new ObjectParameter("REMARK", typeof(string));
    
            var iSACTIVEParameter = iSACTIVE.HasValue ?
                new ObjectParameter("ISACTIVE", iSACTIVE) :
                new ObjectParameter("ISACTIVE", typeof(bool));
    
            var cHANGEPASSParameter = cHANGEPASS.HasValue ?
                new ObjectParameter("CHANGEPASS", cHANGEPASS) :
                new ObjectParameter("CHANGEPASS", typeof(bool));
    
            var nEWPASSParameter = nEWPASS != null ?
                new ObjectParameter("NEWPASS", nEWPASS) :
                new ObjectParameter("NEWPASS", typeof(string));
    
            var uSERIDParameter = uSERID != null ?
                new ObjectParameter("USERID", uSERID) :
                new ObjectParameter("USERID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GUARD_UPDATE", guardIdParameter, nAMEParameter, rEMARKParameter, iSACTIVEParameter, cHANGEPASSParameter, nEWPASSParameter, uSERIDParameter);
        }
    
        public virtual ObjectResult<SP_PASSINGGOODS_APPROVAL_HISTORY_Result> SP_PASSINGGOODS_APPROVAL_HISTORY(Nullable<int> masterId, Nullable<int> applicationId)
        {
            var masterIdParameter = masterId.HasValue ?
                new ObjectParameter("MasterId", masterId) :
                new ObjectParameter("MasterId", typeof(int));
    
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PASSINGGOODS_APPROVAL_HISTORY_Result>("SP_PASSINGGOODS_APPROVAL_HISTORY", masterIdParameter, applicationIdParameter);
        }
    
        public virtual int SP_PASSINGGOODS_APPROVE(Nullable<int> masterId, Nullable<int> applicationId, Nullable<bool> isApprove, string comment, string userId, string linkApplication)
        {
            var masterIdParameter = masterId.HasValue ?
                new ObjectParameter("MasterId", masterId) :
                new ObjectParameter("MasterId", typeof(int));
    
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(int));
    
            var isApproveParameter = isApprove.HasValue ?
                new ObjectParameter("IsApprove", isApprove) :
                new ObjectParameter("IsApprove", typeof(bool));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var linkApplicationParameter = linkApplication != null ?
                new ObjectParameter("LinkApplication", linkApplication) :
                new ObjectParameter("LinkApplication", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_PASSINGGOODS_APPROVE", masterIdParameter, applicationIdParameter, isApproveParameter, commentParameter, userIdParameter, linkApplicationParameter);
        }
    
        public virtual int SP_PASSINGGOODS_CONFIRM(Nullable<int> masterId, Nullable<bool> status, string linkApplication)
        {
            var masterIdParameter = masterId.HasValue ?
                new ObjectParameter("MasterId", masterId) :
                new ObjectParameter("MasterId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var linkApplicationParameter = linkApplication != null ?
                new ObjectParameter("LinkApplication", linkApplication) :
                new ObjectParameter("LinkApplication", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_PASSINGGOODS_CONFIRM", masterIdParameter, statusParameter, linkApplicationParameter);
        }
    
        public virtual ObjectResult<SP_PASSINGGOODS_DETAIL_GET_Result> SP_PASSINGGOODS_DETAIL_GET(Nullable<int> iD, Nullable<int> mASTERID, Nullable<bool> iSIMPORT)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var mASTERIDParameter = mASTERID.HasValue ?
                new ObjectParameter("MASTERID", mASTERID) :
                new ObjectParameter("MASTERID", typeof(int));
    
            var iSIMPORTParameter = iSIMPORT.HasValue ?
                new ObjectParameter("ISIMPORT", iSIMPORT) :
                new ObjectParameter("ISIMPORT", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PASSINGGOODS_DETAIL_GET_Result>("SP_PASSINGGOODS_DETAIL_GET", iDParameter, mASTERIDParameter, iSIMPORTParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_PASSINGGOODS_DETAIL_INSERT(Nullable<int> mASTERID, string iTEMNAME, string sERIAL, string dESCRIPTION, Nullable<int> qUANTITY, string iTEMLOCATION, Nullable<bool> iSATTACHMENT, Nullable<bool> rEIMPORT, Nullable<System.DateTime> rEIMPORTDATE)
        {
            var mASTERIDParameter = mASTERID.HasValue ?
                new ObjectParameter("MASTERID", mASTERID) :
                new ObjectParameter("MASTERID", typeof(int));
    
            var iTEMNAMEParameter = iTEMNAME != null ?
                new ObjectParameter("ITEMNAME", iTEMNAME) :
                new ObjectParameter("ITEMNAME", typeof(string));
    
            var sERIALParameter = sERIAL != null ?
                new ObjectParameter("SERIAL", sERIAL) :
                new ObjectParameter("SERIAL", typeof(string));
    
            var dESCRIPTIONParameter = dESCRIPTION != null ?
                new ObjectParameter("DESCRIPTION", dESCRIPTION) :
                new ObjectParameter("DESCRIPTION", typeof(string));
    
            var qUANTITYParameter = qUANTITY.HasValue ?
                new ObjectParameter("QUANTITY", qUANTITY) :
                new ObjectParameter("QUANTITY", typeof(int));
    
            var iTEMLOCATIONParameter = iTEMLOCATION != null ?
                new ObjectParameter("ITEMLOCATION", iTEMLOCATION) :
                new ObjectParameter("ITEMLOCATION", typeof(string));
    
            var iSATTACHMENTParameter = iSATTACHMENT.HasValue ?
                new ObjectParameter("ISATTACHMENT", iSATTACHMENT) :
                new ObjectParameter("ISATTACHMENT", typeof(bool));
    
            var rEIMPORTParameter = rEIMPORT.HasValue ?
                new ObjectParameter("REIMPORT", rEIMPORT) :
                new ObjectParameter("REIMPORT", typeof(bool));
    
            var rEIMPORTDATEParameter = rEIMPORTDATE.HasValue ?
                new ObjectParameter("REIMPORTDATE", rEIMPORTDATE) :
                new ObjectParameter("REIMPORTDATE", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_PASSINGGOODS_DETAIL_INSERT", mASTERIDParameter, iTEMNAMEParameter, sERIALParameter, dESCRIPTIONParameter, qUANTITYParameter, iTEMLOCATIONParameter, iSATTACHMENTParameter, rEIMPORTParameter, rEIMPORTDATEParameter);
        }
    
        public virtual int SP_PASSINGGOODS_DETAIL_UPDATE(Nullable<int> iD, Nullable<int> mASTERID, string iTEMNAME, string sERIAL, string dESCRIPTION, Nullable<int> qUANTITY, string iTEMLOCATION, Nullable<bool> iSATTACHMENT)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var mASTERIDParameter = mASTERID.HasValue ?
                new ObjectParameter("MASTERID", mASTERID) :
                new ObjectParameter("MASTERID", typeof(int));
    
            var iTEMNAMEParameter = iTEMNAME != null ?
                new ObjectParameter("ITEMNAME", iTEMNAME) :
                new ObjectParameter("ITEMNAME", typeof(string));
    
            var sERIALParameter = sERIAL != null ?
                new ObjectParameter("SERIAL", sERIAL) :
                new ObjectParameter("SERIAL", typeof(string));
    
            var dESCRIPTIONParameter = dESCRIPTION != null ?
                new ObjectParameter("DESCRIPTION", dESCRIPTION) :
                new ObjectParameter("DESCRIPTION", typeof(string));
    
            var qUANTITYParameter = qUANTITY.HasValue ?
                new ObjectParameter("QUANTITY", qUANTITY) :
                new ObjectParameter("QUANTITY", typeof(int));
    
            var iTEMLOCATIONParameter = iTEMLOCATION != null ?
                new ObjectParameter("ITEMLOCATION", iTEMLOCATION) :
                new ObjectParameter("ITEMLOCATION", typeof(string));
    
            var iSATTACHMENTParameter = iSATTACHMENT.HasValue ?
                new ObjectParameter("ISATTACHMENT", iSATTACHMENT) :
                new ObjectParameter("ISATTACHMENT", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_PASSINGGOODS_DETAIL_UPDATE", iDParameter, mASTERIDParameter, iTEMNAMEParameter, sERIALParameter, dESCRIPTIONParameter, qUANTITYParameter, iTEMLOCATIONParameter, iSATTACHMENTParameter);
        }
    
        public virtual int SP_PASSINGGOODS_DETAIL_UPDATE_CHECKOUT(Nullable<int> iD, Nullable<int> mASTERID, string gATEID, Nullable<System.DateTime> pASSDATE, Nullable<System.DateTime> iMPORTDATE, string rEMARK, string sECURITYNAME, Nullable<System.DateTime> fINISHDATE, string fINISHREASON)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var mASTERIDParameter = mASTERID.HasValue ?
                new ObjectParameter("MASTERID", mASTERID) :
                new ObjectParameter("MASTERID", typeof(int));
    
            var gATEIDParameter = gATEID != null ?
                new ObjectParameter("GATEID", gATEID) :
                new ObjectParameter("GATEID", typeof(string));
    
            var pASSDATEParameter = pASSDATE.HasValue ?
                new ObjectParameter("PASSDATE", pASSDATE) :
                new ObjectParameter("PASSDATE", typeof(System.DateTime));
    
            var iMPORTDATEParameter = iMPORTDATE.HasValue ?
                new ObjectParameter("IMPORTDATE", iMPORTDATE) :
                new ObjectParameter("IMPORTDATE", typeof(System.DateTime));
    
            var rEMARKParameter = rEMARK != null ?
                new ObjectParameter("REMARK", rEMARK) :
                new ObjectParameter("REMARK", typeof(string));
    
            var sECURITYNAMEParameter = sECURITYNAME != null ?
                new ObjectParameter("SECURITYNAME", sECURITYNAME) :
                new ObjectParameter("SECURITYNAME", typeof(string));
    
            var fINISHDATEParameter = fINISHDATE.HasValue ?
                new ObjectParameter("FINISHDATE", fINISHDATE) :
                new ObjectParameter("FINISHDATE", typeof(System.DateTime));
    
            var fINISHREASONParameter = fINISHREASON != null ?
                new ObjectParameter("FINISHREASON", fINISHREASON) :
                new ObjectParameter("FINISHREASON", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_PASSINGGOODS_DETAIL_UPDATE_CHECKOUT", iDParameter, mASTERIDParameter, gATEIDParameter, pASSDATEParameter, iMPORTDATEParameter, rEMARKParameter, sECURITYNAMEParameter, fINISHDATEParameter, fINISHREASONParameter);
        }
    
        public virtual ObjectResult<SP_PASSINGGOODS_GET_Result> SP_PASSINGGOODS_GET(Nullable<int> iD, Nullable<System.DateTime> fROMDATE, Nullable<System.DateTime> tODATE, string uSERID, string aPPROVESTATUS)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var fROMDATEParameter = fROMDATE.HasValue ?
                new ObjectParameter("FROMDATE", fROMDATE) :
                new ObjectParameter("FROMDATE", typeof(System.DateTime));
    
            var tODATEParameter = tODATE.HasValue ?
                new ObjectParameter("TODATE", tODATE) :
                new ObjectParameter("TODATE", typeof(System.DateTime));
    
            var uSERIDParameter = uSERID != null ?
                new ObjectParameter("USERID", uSERID) :
                new ObjectParameter("USERID", typeof(string));
    
            var aPPROVESTATUSParameter = aPPROVESTATUS != null ?
                new ObjectParameter("APPROVESTATUS", aPPROVESTATUS) :
                new ObjectParameter("APPROVESTATUS", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PASSINGGOODS_GET_Result>("SP_PASSINGGOODS_GET", iDParameter, fROMDATEParameter, tODATEParameter, uSERIDParameter, aPPROVESTATUSParameter);
        }
    
        public virtual ObjectResult<SP_PASSINGGOODS_GETDETAIL_Result> SP_PASSINGGOODS_GETDETAIL(Nullable<int> iD, string uSERID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var uSERIDParameter = uSERID != null ?
                new ObjectParameter("USERID", uSERID) :
                new ObjectParameter("USERID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PASSINGGOODS_GETDETAIL_Result>("SP_PASSINGGOODS_GETDETAIL", iDParameter, uSERIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_PASSINGGOODS_INSERT(string aPPLICANT, Nullable<int> dEPTID, Nullable<System.DateTime> aPPLICATIONDATE, Nullable<bool> rEIMPORT, Nullable<System.DateTime> rEIMPORTDATE, string rEASON, string uSERID)
        {
            var aPPLICANTParameter = aPPLICANT != null ?
                new ObjectParameter("APPLICANT", aPPLICANT) :
                new ObjectParameter("APPLICANT", typeof(string));
    
            var dEPTIDParameter = dEPTID.HasValue ?
                new ObjectParameter("DEPTID", dEPTID) :
                new ObjectParameter("DEPTID", typeof(int));
    
            var aPPLICATIONDATEParameter = aPPLICATIONDATE.HasValue ?
                new ObjectParameter("APPLICATIONDATE", aPPLICATIONDATE) :
                new ObjectParameter("APPLICATIONDATE", typeof(System.DateTime));
    
            var rEIMPORTParameter = rEIMPORT.HasValue ?
                new ObjectParameter("REIMPORT", rEIMPORT) :
                new ObjectParameter("REIMPORT", typeof(bool));
    
            var rEIMPORTDATEParameter = rEIMPORTDATE.HasValue ?
                new ObjectParameter("REIMPORTDATE", rEIMPORTDATE) :
                new ObjectParameter("REIMPORTDATE", typeof(System.DateTime));
    
            var rEASONParameter = rEASON != null ?
                new ObjectParameter("REASON", rEASON) :
                new ObjectParameter("REASON", typeof(string));
    
            var uSERIDParameter = uSERID != null ?
                new ObjectParameter("USERID", uSERID) :
                new ObjectParameter("USERID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_PASSINGGOODS_INSERT", aPPLICANTParameter, dEPTIDParameter, aPPLICATIONDATEParameter, rEIMPORTParameter, rEIMPORTDATEParameter, rEASONParameter, uSERIDParameter);
        }
    
        public virtual int SP_PASSINGGOODS_RECALL(Nullable<int> masterId, Nullable<int> applicationId, string userId)
        {
            var masterIdParameter = masterId.HasValue ?
                new ObjectParameter("MasterId", masterId) :
                new ObjectParameter("MasterId", typeof(int));
    
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_PASSINGGOODS_RECALL", masterIdParameter, applicationIdParameter, userIdParameter);
        }
    
        public virtual int SP_PASSINGGOODS_UPDATE(Nullable<int> iD, string aPPLICANT, Nullable<int> dEPTID, Nullable<System.DateTime> aPPLICATIONDATE, Nullable<bool> rEIMPORT, Nullable<System.DateTime> rEIMPORTDATE, string rEASON, string uSERID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var aPPLICANTParameter = aPPLICANT != null ?
                new ObjectParameter("APPLICANT", aPPLICANT) :
                new ObjectParameter("APPLICANT", typeof(string));
    
            var dEPTIDParameter = dEPTID.HasValue ?
                new ObjectParameter("DEPTID", dEPTID) :
                new ObjectParameter("DEPTID", typeof(int));
    
            var aPPLICATIONDATEParameter = aPPLICATIONDATE.HasValue ?
                new ObjectParameter("APPLICATIONDATE", aPPLICATIONDATE) :
                new ObjectParameter("APPLICATIONDATE", typeof(System.DateTime));
    
            var rEIMPORTParameter = rEIMPORT.HasValue ?
                new ObjectParameter("REIMPORT", rEIMPORT) :
                new ObjectParameter("REIMPORT", typeof(bool));
    
            var rEIMPORTDATEParameter = rEIMPORTDATE.HasValue ?
                new ObjectParameter("REIMPORTDATE", rEIMPORTDATE) :
                new ObjectParameter("REIMPORTDATE", typeof(System.DateTime));
    
            var rEASONParameter = rEASON != null ?
                new ObjectParameter("REASON", rEASON) :
                new ObjectParameter("REASON", typeof(string));
    
            var uSERIDParameter = uSERID != null ?
                new ObjectParameter("USERID", uSERID) :
                new ObjectParameter("USERID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_PASSINGGOODS_UPDATE", iDParameter, aPPLICANTParameter, dEPTIDParameter, aPPLICATIONDATEParameter, rEIMPORTParameter, rEIMPORTDATEParameter, rEASONParameter, uSERIDParameter);
        }
    
        public virtual int SP_PASSINGGOODS_UPDATE_ALLDATA(Nullable<int> id, Nullable<int> applicationId, string approvalLine, string approvalLineJson, string userId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(int));
    
            var approvalLineParameter = approvalLine != null ?
                new ObjectParameter("ApprovalLine", approvalLine) :
                new ObjectParameter("ApprovalLine", typeof(string));
    
            var approvalLineJsonParameter = approvalLineJson != null ?
                new ObjectParameter("ApprovalLineJson", approvalLineJson) :
                new ObjectParameter("ApprovalLineJson", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_PASSINGGOODS_UPDATE_ALLDATA", idParameter, applicationIdParameter, approvalLineParameter, approvalLineJsonParameter, userIdParameter);
        }
    
        public virtual ObjectResult<string> SP_VENDOR_DELETE(Nullable<int> id, string userId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_VENDOR_DELETE", idParameter, userIdParameter);
        }
    
        public virtual int SP_VENDOR_UPDATE(Nullable<int> id, string companyName, string address, Nullable<int> deptId, string personInCharge, string contactPerson, string identityCard, string phoneNumber, string email, Nullable<bool> active, string userId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var deptIdParameter = deptId.HasValue ?
                new ObjectParameter("DeptId", deptId) :
                new ObjectParameter("DeptId", typeof(int));
    
            var personInChargeParameter = personInCharge != null ?
                new ObjectParameter("PersonInCharge", personInCharge) :
                new ObjectParameter("PersonInCharge", typeof(string));
    
            var contactPersonParameter = contactPerson != null ?
                new ObjectParameter("ContactPerson", contactPerson) :
                new ObjectParameter("ContactPerson", typeof(string));
    
            var identityCardParameter = identityCard != null ?
                new ObjectParameter("IdentityCard", identityCard) :
                new ObjectParameter("IdentityCard", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_VENDOR_UPDATE", idParameter, companyNameParameter, addressParameter, deptIdParameter, personInChargeParameter, contactPersonParameter, identityCardParameter, phoneNumberParameter, emailParameter, activeParameter, userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_VIOLATION_INSERT(Nullable<int> vISITORID, string eMPID, Nullable<int> dEPT, Nullable<System.DateTime> vIOLATEDATE, string vIOLATETYPE, string rEASONDETAIL, Nullable<bool> iSBLACKLIST, string pERSONINCHARGE, Nullable<bool> iSATTACHMENT, string uSERID)
        {
            var vISITORIDParameter = vISITORID.HasValue ?
                new ObjectParameter("VISITORID", vISITORID) :
                new ObjectParameter("VISITORID", typeof(int));
    
            var eMPIDParameter = eMPID != null ?
                new ObjectParameter("EMPID", eMPID) :
                new ObjectParameter("EMPID", typeof(string));
    
            var dEPTParameter = dEPT.HasValue ?
                new ObjectParameter("DEPT", dEPT) :
                new ObjectParameter("DEPT", typeof(int));
    
            var vIOLATEDATEParameter = vIOLATEDATE.HasValue ?
                new ObjectParameter("VIOLATEDATE", vIOLATEDATE) :
                new ObjectParameter("VIOLATEDATE", typeof(System.DateTime));
    
            var vIOLATETYPEParameter = vIOLATETYPE != null ?
                new ObjectParameter("VIOLATETYPE", vIOLATETYPE) :
                new ObjectParameter("VIOLATETYPE", typeof(string));
    
            var rEASONDETAILParameter = rEASONDETAIL != null ?
                new ObjectParameter("REASONDETAIL", rEASONDETAIL) :
                new ObjectParameter("REASONDETAIL", typeof(string));
    
            var iSBLACKLISTParameter = iSBLACKLIST.HasValue ?
                new ObjectParameter("ISBLACKLIST", iSBLACKLIST) :
                new ObjectParameter("ISBLACKLIST", typeof(bool));
    
            var pERSONINCHARGEParameter = pERSONINCHARGE != null ?
                new ObjectParameter("PERSONINCHARGE", pERSONINCHARGE) :
                new ObjectParameter("PERSONINCHARGE", typeof(string));
    
            var iSATTACHMENTParameter = iSATTACHMENT.HasValue ?
                new ObjectParameter("ISATTACHMENT", iSATTACHMENT) :
                new ObjectParameter("ISATTACHMENT", typeof(bool));
    
            var uSERIDParameter = uSERID != null ?
                new ObjectParameter("USERID", uSERID) :
                new ObjectParameter("USERID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_VIOLATION_INSERT", vISITORIDParameter, eMPIDParameter, dEPTParameter, vIOLATEDATEParameter, vIOLATETYPEParameter, rEASONDETAILParameter, iSBLACKLISTParameter, pERSONINCHARGEParameter, iSATTACHMENTParameter, uSERIDParameter);
        }
    
        public virtual int SP_VIOLATION_UPDATE(Nullable<int> iD, Nullable<int> vISITORID, string eMPID, Nullable<int> dEPT, Nullable<System.DateTime> vIOLATEDATE, string vIOLATETYPE, string rEASONDETAIL, Nullable<bool> iSBLACKLIST, string pERSONINCHARGE, Nullable<bool> iSATTACHMENT, string uSERID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var vISITORIDParameter = vISITORID.HasValue ?
                new ObjectParameter("VISITORID", vISITORID) :
                new ObjectParameter("VISITORID", typeof(int));
    
            var eMPIDParameter = eMPID != null ?
                new ObjectParameter("EMPID", eMPID) :
                new ObjectParameter("EMPID", typeof(string));
    
            var dEPTParameter = dEPT.HasValue ?
                new ObjectParameter("DEPT", dEPT) :
                new ObjectParameter("DEPT", typeof(int));
    
            var vIOLATEDATEParameter = vIOLATEDATE.HasValue ?
                new ObjectParameter("VIOLATEDATE", vIOLATEDATE) :
                new ObjectParameter("VIOLATEDATE", typeof(System.DateTime));
    
            var vIOLATETYPEParameter = vIOLATETYPE != null ?
                new ObjectParameter("VIOLATETYPE", vIOLATETYPE) :
                new ObjectParameter("VIOLATETYPE", typeof(string));
    
            var rEASONDETAILParameter = rEASONDETAIL != null ?
                new ObjectParameter("REASONDETAIL", rEASONDETAIL) :
                new ObjectParameter("REASONDETAIL", typeof(string));
    
            var iSBLACKLISTParameter = iSBLACKLIST.HasValue ?
                new ObjectParameter("ISBLACKLIST", iSBLACKLIST) :
                new ObjectParameter("ISBLACKLIST", typeof(bool));
    
            var pERSONINCHARGEParameter = pERSONINCHARGE != null ?
                new ObjectParameter("PERSONINCHARGE", pERSONINCHARGE) :
                new ObjectParameter("PERSONINCHARGE", typeof(string));
    
            var iSATTACHMENTParameter = iSATTACHMENT.HasValue ?
                new ObjectParameter("ISATTACHMENT", iSATTACHMENT) :
                new ObjectParameter("ISATTACHMENT", typeof(bool));
    
            var uSERIDParameter = uSERID != null ?
                new ObjectParameter("USERID", uSERID) :
                new ObjectParameter("USERID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_VIOLATION_UPDATE", iDParameter, vISITORIDParameter, eMPIDParameter, dEPTParameter, vIOLATEDATEParameter, vIOLATETYPEParameter, rEASONDETAILParameter, iSBLACKLISTParameter, pERSONINCHARGEParameter, iSATTACHMENTParameter, uSERIDParameter);
        }
    
        public virtual int SP_VISITOR_APPLICATION_DETAIL_DELETE(Nullable<int> id, string userId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_VISITOR_APPLICATION_DETAIL_DELETE", idParameter, userIdParameter);
        }
    
        public virtual ObjectResult<SP_VISITOR_APPLICATION_DETAIL_GET_Result> SP_VISITOR_APPLICATION_DETAIL_GET(Nullable<int> applicationMasterid, Nullable<int> id)
        {
            var applicationMasteridParameter = applicationMasterid.HasValue ?
                new ObjectParameter("ApplicationMasterid", applicationMasterid) :
                new ObjectParameter("ApplicationMasterid", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_VISITOR_APPLICATION_DETAIL_GET_Result>("SP_VISITOR_APPLICATION_DETAIL_GET", applicationMasteridParameter, idParameter);
        }
    
        public virtual ObjectResult<string> SP_VISITOR_APPLICATION_DETAIL_INSERT(Nullable<int> applicationMasterid, string image, string fullName, string identityCard, string phoneNumber, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string driverPlate, string vehicleType, Nullable<bool> isWorkHourOfficial, string phoneDriver, string driverName, string userId)
        {
            var applicationMasteridParameter = applicationMasterid.HasValue ?
                new ObjectParameter("ApplicationMasterid", applicationMasterid) :
                new ObjectParameter("ApplicationMasterid", typeof(int));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var identityCardParameter = identityCard != null ?
                new ObjectParameter("IdentityCard", identityCard) :
                new ObjectParameter("IdentityCard", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var driverPlateParameter = driverPlate != null ?
                new ObjectParameter("DriverPlate", driverPlate) :
                new ObjectParameter("DriverPlate", typeof(string));
    
            var vehicleTypeParameter = vehicleType != null ?
                new ObjectParameter("VehicleType", vehicleType) :
                new ObjectParameter("VehicleType", typeof(string));
    
            var isWorkHourOfficialParameter = isWorkHourOfficial.HasValue ?
                new ObjectParameter("IsWorkHourOfficial", isWorkHourOfficial) :
                new ObjectParameter("IsWorkHourOfficial", typeof(bool));
    
            var phoneDriverParameter = phoneDriver != null ?
                new ObjectParameter("PhoneDriver", phoneDriver) :
                new ObjectParameter("PhoneDriver", typeof(string));
    
            var driverNameParameter = driverName != null ?
                new ObjectParameter("DriverName", driverName) :
                new ObjectParameter("DriverName", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_VISITOR_APPLICATION_DETAIL_INSERT", applicationMasteridParameter, imageParameter, fullNameParameter, identityCardParameter, phoneNumberParameter, fromDateParameter, toDateParameter, driverPlateParameter, vehicleTypeParameter, isWorkHourOfficialParameter, phoneDriverParameter, driverNameParameter, userIdParameter);
        }
    
        public virtual ObjectResult<string> SP_VISITOR_APPLICATION_DETAIL_UPDATE(Nullable<int> id, Nullable<int> applicationMasterid, string image, string fullName, string identityCard, string phoneNumber, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string driverPlate, string vehicleType, Nullable<bool> isWorkHourOfficial, string phoneDriver, string driverName, string userId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var applicationMasteridParameter = applicationMasterid.HasValue ?
                new ObjectParameter("ApplicationMasterid", applicationMasterid) :
                new ObjectParameter("ApplicationMasterid", typeof(int));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var identityCardParameter = identityCard != null ?
                new ObjectParameter("IdentityCard", identityCard) :
                new ObjectParameter("IdentityCard", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var driverPlateParameter = driverPlate != null ?
                new ObjectParameter("DriverPlate", driverPlate) :
                new ObjectParameter("DriverPlate", typeof(string));
    
            var vehicleTypeParameter = vehicleType != null ?
                new ObjectParameter("VehicleType", vehicleType) :
                new ObjectParameter("VehicleType", typeof(string));
    
            var isWorkHourOfficialParameter = isWorkHourOfficial.HasValue ?
                new ObjectParameter("IsWorkHourOfficial", isWorkHourOfficial) :
                new ObjectParameter("IsWorkHourOfficial", typeof(bool));
    
            var phoneDriverParameter = phoneDriver != null ?
                new ObjectParameter("PhoneDriver", phoneDriver) :
                new ObjectParameter("PhoneDriver", typeof(string));
    
            var driverNameParameter = driverName != null ?
                new ObjectParameter("DriverName", driverName) :
                new ObjectParameter("DriverName", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_VISITOR_APPLICATION_DETAIL_UPDATE", idParameter, applicationMasteridParameter, imageParameter, fullNameParameter, identityCardParameter, phoneNumberParameter, fromDateParameter, toDateParameter, driverPlateParameter, vehicleTypeParameter, isWorkHourOfficialParameter, phoneDriverParameter, driverNameParameter, userIdParameter);
        }
    
        public virtual ObjectResult<SP_VISITOR_APPLICATION_DETAIL_VEHICLE_GET_Result> SP_VISITOR_APPLICATION_DETAIL_VEHICLE_GET(Nullable<int> applicationMasterid, Nullable<int> id)
        {
            var applicationMasteridParameter = applicationMasterid.HasValue ?
                new ObjectParameter("ApplicationMasterid", applicationMasterid) :
                new ObjectParameter("ApplicationMasterid", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_VISITOR_APPLICATION_DETAIL_VEHICLE_GET_Result>("SP_VISITOR_APPLICATION_DETAIL_VEHICLE_GET", applicationMasteridParameter, idParameter);
        }
    
        public virtual ObjectResult<SP_VISITOR_APPLICATION_GET_APPROVAL_Result> SP_VISITOR_APPLICATION_GET_APPROVAL(Nullable<int> applicationId, Nullable<int> masterId)
        {
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(int));
    
            var masterIdParameter = masterId.HasValue ?
                new ObjectParameter("MasterId", masterId) :
                new ObjectParameter("MasterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_VISITOR_APPLICATION_GET_APPROVAL_Result>("SP_VISITOR_APPLICATION_GET_APPROVAL", applicationIdParameter, masterIdParameter);
        }
    
        public virtual ObjectResult<SP_VISITOR_APPLICATION_MASTER_APPROVAL_HISTORY_Result> SP_VISITOR_APPLICATION_MASTER_APPROVAL_HISTORY(Nullable<int> masterId, Nullable<int> applicationId)
        {
            var masterIdParameter = masterId.HasValue ?
                new ObjectParameter("MasterId", masterId) :
                new ObjectParameter("MasterId", typeof(int));
    
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_VISITOR_APPLICATION_MASTER_APPROVAL_HISTORY_Result>("SP_VISITOR_APPLICATION_MASTER_APPROVAL_HISTORY", masterIdParameter, applicationIdParameter);
        }
    
        public virtual int SP_VISITOR_APPLICATION_MASTER_APPROVE(Nullable<int> masterId, Nullable<int> applicationId, Nullable<bool> isApprove, string comment, string userId, string linkApplication)
        {
            var masterIdParameter = masterId.HasValue ?
                new ObjectParameter("MasterId", masterId) :
                new ObjectParameter("MasterId", typeof(int));
    
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(int));
    
            var isApproveParameter = isApprove.HasValue ?
                new ObjectParameter("IsApprove", isApprove) :
                new ObjectParameter("IsApprove", typeof(bool));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var linkApplicationParameter = linkApplication != null ?
                new ObjectParameter("LinkApplication", linkApplication) :
                new ObjectParameter("LinkApplication", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_VISITOR_APPLICATION_MASTER_APPROVE", masterIdParameter, applicationIdParameter, isApproveParameter, commentParameter, userIdParameter, linkApplicationParameter);
        }
    
        public virtual int SP_VISITOR_APPLICATION_MASTER_CONFIRM(Nullable<int> masterId, Nullable<bool> status, string linkApplication)
        {
            var masterIdParameter = masterId.HasValue ?
                new ObjectParameter("MasterId", masterId) :
                new ObjectParameter("MasterId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var linkApplicationParameter = linkApplication != null ?
                new ObjectParameter("LinkApplication", linkApplication) :
                new ObjectParameter("LinkApplication", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_VISITOR_APPLICATION_MASTER_CONFIRM", masterIdParameter, statusParameter, linkApplicationParameter);
        }
    
        public virtual int SP_VISITOR_APPLICATION_MASTER_DELETE(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_VISITOR_APPLICATION_MASTER_DELETE", idParameter);
        }
    
        public virtual ObjectResult<SP_VISITOR_APPLICATION_MASTER_GET_FOR_SECURITY_Result> SP_VISITOR_APPLICATION_MASTER_GET_FOR_SECURITY(Nullable<int> iD, Nullable<System.DateTime> fROMDATE, Nullable<System.DateTime> tODATE, Nullable<int> aPPLICATIONTYPE, string aPPROVESTATUS, string uSERID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var fROMDATEParameter = fROMDATE.HasValue ?
                new ObjectParameter("FROMDATE", fROMDATE) :
                new ObjectParameter("FROMDATE", typeof(System.DateTime));
    
            var tODATEParameter = tODATE.HasValue ?
                new ObjectParameter("TODATE", tODATE) :
                new ObjectParameter("TODATE", typeof(System.DateTime));
    
            var aPPLICATIONTYPEParameter = aPPLICATIONTYPE.HasValue ?
                new ObjectParameter("APPLICATIONTYPE", aPPLICATIONTYPE) :
                new ObjectParameter("APPLICATIONTYPE", typeof(int));
    
            var aPPROVESTATUSParameter = aPPROVESTATUS != null ?
                new ObjectParameter("APPROVESTATUS", aPPROVESTATUS) :
                new ObjectParameter("APPROVESTATUS", typeof(string));
    
            var uSERIDParameter = uSERID != null ?
                new ObjectParameter("USERID", uSERID) :
                new ObjectParameter("USERID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_VISITOR_APPLICATION_MASTER_GET_FOR_SECURITY_Result>("SP_VISITOR_APPLICATION_MASTER_GET_FOR_SECURITY", iDParameter, fROMDATEParameter, tODATEParameter, aPPLICATIONTYPEParameter, aPPROVESTATUSParameter, uSERIDParameter);
        }
    
        public virtual ObjectResult<SP_VISITOR_APPLICATION_MASTER_GETDETAIL_Result> SP_VISITOR_APPLICATION_MASTER_GETDETAIL(Nullable<int> iD, string uSERID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var uSERIDParameter = uSERID != null ?
                new ObjectParameter("USERID", uSERID) :
                new ObjectParameter("USERID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_VISITOR_APPLICATION_MASTER_GETDETAIL_Result>("SP_VISITOR_APPLICATION_MASTER_GETDETAIL", iDParameter, uSERIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> SP_VISITOR_APPLICATION_MASTER_INSERT(Nullable<int> deptId, string applicant, string phoneNumber, string handPhoneNumber, Nullable<int> applicationType, Nullable<int> vendor, string purpose, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string gate, string location, string locationOther, string remarke, string userId)
        {
            var deptIdParameter = deptId.HasValue ?
                new ObjectParameter("DeptId", deptId) :
                new ObjectParameter("DeptId", typeof(int));
    
            var applicantParameter = applicant != null ?
                new ObjectParameter("Applicant", applicant) :
                new ObjectParameter("Applicant", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var handPhoneNumberParameter = handPhoneNumber != null ?
                new ObjectParameter("HandPhoneNumber", handPhoneNumber) :
                new ObjectParameter("HandPhoneNumber", typeof(string));
    
            var applicationTypeParameter = applicationType.HasValue ?
                new ObjectParameter("ApplicationType", applicationType) :
                new ObjectParameter("ApplicationType", typeof(int));
    
            var vendorParameter = vendor.HasValue ?
                new ObjectParameter("Vendor", vendor) :
                new ObjectParameter("Vendor", typeof(int));
    
            var purposeParameter = purpose != null ?
                new ObjectParameter("Purpose", purpose) :
                new ObjectParameter("Purpose", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var gateParameter = gate != null ?
                new ObjectParameter("Gate", gate) :
                new ObjectParameter("Gate", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var locationOtherParameter = locationOther != null ?
                new ObjectParameter("LocationOther", locationOther) :
                new ObjectParameter("LocationOther", typeof(string));
    
            var remarkeParameter = remarke != null ?
                new ObjectParameter("Remarke", remarke) :
                new ObjectParameter("Remarke", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SP_VISITOR_APPLICATION_MASTER_INSERT", deptIdParameter, applicantParameter, phoneNumberParameter, handPhoneNumberParameter, applicationTypeParameter, vendorParameter, purposeParameter, fromDateParameter, toDateParameter, gateParameter, locationParameter, locationOtherParameter, remarkeParameter, userIdParameter);
        }
    
        public virtual int SP_VISITOR_APPLICATION_MASTER_RECALL(Nullable<int> masterId, Nullable<int> applicationId, string userId)
        {
            var masterIdParameter = masterId.HasValue ?
                new ObjectParameter("MasterId", masterId) :
                new ObjectParameter("MasterId", typeof(int));
    
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_VISITOR_APPLICATION_MASTER_RECALL", masterIdParameter, applicationIdParameter, userIdParameter);
        }
    
        public virtual int SP_VISITOR_APPLICATION_MASTER_UPDATE(Nullable<int> id, Nullable<int> deptId, string applicant, string phoneNumber, string handPhoneNumber, Nullable<int> applicationType, Nullable<int> vendor, string purpose, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string gate, string location, string locationOther, string remarke, string userId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var deptIdParameter = deptId.HasValue ?
                new ObjectParameter("DeptId", deptId) :
                new ObjectParameter("DeptId", typeof(int));
    
            var applicantParameter = applicant != null ?
                new ObjectParameter("Applicant", applicant) :
                new ObjectParameter("Applicant", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var handPhoneNumberParameter = handPhoneNumber != null ?
                new ObjectParameter("HandPhoneNumber", handPhoneNumber) :
                new ObjectParameter("HandPhoneNumber", typeof(string));
    
            var applicationTypeParameter = applicationType.HasValue ?
                new ObjectParameter("ApplicationType", applicationType) :
                new ObjectParameter("ApplicationType", typeof(int));
    
            var vendorParameter = vendor.HasValue ?
                new ObjectParameter("Vendor", vendor) :
                new ObjectParameter("Vendor", typeof(int));
    
            var purposeParameter = purpose != null ?
                new ObjectParameter("Purpose", purpose) :
                new ObjectParameter("Purpose", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var gateParameter = gate != null ?
                new ObjectParameter("Gate", gate) :
                new ObjectParameter("Gate", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var locationOtherParameter = locationOther != null ?
                new ObjectParameter("LocationOther", locationOther) :
                new ObjectParameter("LocationOther", typeof(string));
    
            var remarkeParameter = remarke != null ?
                new ObjectParameter("Remarke", remarke) :
                new ObjectParameter("Remarke", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_VISITOR_APPLICATION_MASTER_UPDATE", idParameter, deptIdParameter, applicantParameter, phoneNumberParameter, handPhoneNumberParameter, applicationTypeParameter, vendorParameter, purposeParameter, fromDateParameter, toDateParameter, gateParameter, locationParameter, locationOtherParameter, remarkeParameter, userIdParameter);
        }
    
        public virtual int SP_VISITOR_APPLICATION_MASTER_UPDATE_ALLDATA(Nullable<int> id, Nullable<int> applicationId, string approvalLine, string approvalLineJson, string userId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(int));
    
            var approvalLineParameter = approvalLine != null ?
                new ObjectParameter("ApprovalLine", approvalLine) :
                new ObjectParameter("ApprovalLine", typeof(string));
    
            var approvalLineJsonParameter = approvalLineJson != null ?
                new ObjectParameter("ApprovalLineJson", approvalLineJson) :
                new ObjectParameter("ApprovalLineJson", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_VISITOR_APPLICATION_MASTER_UPDATE_ALLDATA", idParameter, applicationIdParameter, approvalLineParameter, approvalLineJsonParameter, userIdParameter);
        }
    
        public virtual ObjectResult<SP_SYS_MAIL_LIST_Result> SP_SYS_MAIL_LIST(Nullable<int> sEARCHTYPE, string eMPID, string eMPNAME, string sEX, string nATION, Nullable<int> dEPTID, Nullable<bool> hASEMAIL)
        {
            var sEARCHTYPEParameter = sEARCHTYPE.HasValue ?
                new ObjectParameter("SEARCHTYPE", sEARCHTYPE) :
                new ObjectParameter("SEARCHTYPE", typeof(int));
    
            var eMPIDParameter = eMPID != null ?
                new ObjectParameter("EMPID", eMPID) :
                new ObjectParameter("EMPID", typeof(string));
    
            var eMPNAMEParameter = eMPNAME != null ?
                new ObjectParameter("EMPNAME", eMPNAME) :
                new ObjectParameter("EMPNAME", typeof(string));
    
            var sEXParameter = sEX != null ?
                new ObjectParameter("SEX", sEX) :
                new ObjectParameter("SEX", typeof(string));
    
            var nATIONParameter = nATION != null ?
                new ObjectParameter("NATION", nATION) :
                new ObjectParameter("NATION", typeof(string));
    
            var dEPTIDParameter = dEPTID.HasValue ?
                new ObjectParameter("DEPTID", dEPTID) :
                new ObjectParameter("DEPTID", typeof(int));
    
            var hASEMAILParameter = hASEMAIL.HasValue ?
                new ObjectParameter("HASEMAIL", hASEMAIL) :
                new ObjectParameter("HASEMAIL", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SYS_MAIL_LIST_Result>("SP_SYS_MAIL_LIST", sEARCHTYPEParameter, eMPIDParameter, eMPNAMEParameter, sEXParameter, nATIONParameter, dEPTIDParameter, hASEMAILParameter);
        }
    
        public virtual ObjectResult<SP_SYS_GET_MAIL_GROUP_Result> SP_SYS_GET_MAIL_GROUP(Nullable<int> dEPTID, string dEPTNAME)
        {
            var dEPTIDParameter = dEPTID.HasValue ?
                new ObjectParameter("DEPTID", dEPTID) :
                new ObjectParameter("DEPTID", typeof(int));
    
            var dEPTNAMEParameter = dEPTNAME != null ?
                new ObjectParameter("DEPTNAME", dEPTNAME) :
                new ObjectParameter("DEPTNAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SYS_GET_MAIL_GROUP_Result>("SP_SYS_GET_MAIL_GROUP", dEPTIDParameter, dEPTNAMEParameter);
        }
    
        public virtual ObjectResult<SP_APPROVAL_HISTORY_Result> SP_APPROVAL_HISTORY(string uSERID, Nullable<int> aPPLICATIONID)
        {
            var uSERIDParameter = uSERID != null ?
                new ObjectParameter("USERID", uSERID) :
                new ObjectParameter("USERID", typeof(string));
    
            var aPPLICATIONIDParameter = aPPLICATIONID.HasValue ?
                new ObjectParameter("APPLICATIONID", aPPLICATIONID) :
                new ObjectParameter("APPLICATIONID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_APPROVAL_HISTORY_Result>("SP_APPROVAL_HISTORY", uSERIDParameter, aPPLICATIONIDParameter);
        }
    
        public virtual ObjectResult<SP_SYS_GET_LOG_BY_DEPTID_Result> SP_SYS_GET_LOG_BY_DEPTID(Nullable<int> dEPTID)
        {
            var dEPTIDParameter = dEPTID.HasValue ?
                new ObjectParameter("DEPTID", dEPTID) :
                new ObjectParameter("DEPTID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SYS_GET_LOG_BY_DEPTID_Result>("SP_SYS_GET_LOG_BY_DEPTID", dEPTIDParameter);
        }
    
        public virtual ObjectResult<SP_APPLICATION_CONFIG_GETALL_Result> SP_APPLICATION_CONFIG_GETALL(string name, Nullable<int> deptId, string kind, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var deptIdParameter = deptId.HasValue ?
                new ObjectParameter("DeptId", deptId) :
                new ObjectParameter("DeptId", typeof(int));
    
            var kindParameter = kind != null ?
                new ObjectParameter("Kind", kind) :
                new ObjectParameter("Kind", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_APPLICATION_CONFIG_GETALL_Result>("SP_APPLICATION_CONFIG_GETALL", nameParameter, deptIdParameter, kindParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<SP_APPLICATION_CONFIG_GETLIST_Result> SP_APPLICATION_CONFIG_GETLIST()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_APPLICATION_CONFIG_GETLIST_Result>("SP_APPLICATION_CONFIG_GETLIST");
        }
    
        public virtual ObjectResult<SP_VIOLATION_GET_Result> SP_VIOLATION_GET(Nullable<int> iD, Nullable<System.DateTime> fROMDATE, Nullable<System.DateTime> tODATE, string uSERID, string aPPROVESTATUS)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var fROMDATEParameter = fROMDATE.HasValue ?
                new ObjectParameter("FROMDATE", fROMDATE) :
                new ObjectParameter("FROMDATE", typeof(System.DateTime));
    
            var tODATEParameter = tODATE.HasValue ?
                new ObjectParameter("TODATE", tODATE) :
                new ObjectParameter("TODATE", typeof(System.DateTime));
    
            var uSERIDParameter = uSERID != null ?
                new ObjectParameter("USERID", uSERID) :
                new ObjectParameter("USERID", typeof(string));
    
            var aPPROVESTATUSParameter = aPPROVESTATUS != null ?
                new ObjectParameter("APPROVESTATUS", aPPROVESTATUS) :
                new ObjectParameter("APPROVESTATUS", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_VIOLATION_GET_Result>("SP_VIOLATION_GET", iDParameter, fROMDATEParameter, tODATEParameter, uSERIDParameter, aPPROVESTATUSParameter);
        }
    
        public virtual ObjectResult<SP_VISITOR_GET_Result> SP_VISITOR_GET(Nullable<int> iD, string iDENTITYCARD, Nullable<int> vENDORID, Nullable<System.DateTime> fROMDATE, Nullable<System.DateTime> tODATE)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var iDENTITYCARDParameter = iDENTITYCARD != null ?
                new ObjectParameter("IDENTITYCARD", iDENTITYCARD) :
                new ObjectParameter("IDENTITYCARD", typeof(string));
    
            var vENDORIDParameter = vENDORID.HasValue ?
                new ObjectParameter("VENDORID", vENDORID) :
                new ObjectParameter("VENDORID", typeof(int));
    
            var fROMDATEParameter = fROMDATE.HasValue ?
                new ObjectParameter("FROMDATE", fROMDATE) :
                new ObjectParameter("FROMDATE", typeof(System.DateTime));
    
            var tODATEParameter = tODATE.HasValue ?
                new ObjectParameter("TODATE", tODATE) :
                new ObjectParameter("TODATE", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_VISITOR_GET_Result>("SP_VISITOR_GET", iDParameter, iDENTITYCARDParameter, vENDORIDParameter, fROMDATEParameter, tODATEParameter);
        }
    
        public virtual ObjectResult<SP_VENDOR_GET_Result> SP_VENDOR_GET(Nullable<int> iD, string eMPID, Nullable<System.DateTime> fROMDATE, Nullable<System.DateTime> tODATE, string vENDORTYPE)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var eMPIDParameter = eMPID != null ?
                new ObjectParameter("EMPID", eMPID) :
                new ObjectParameter("EMPID", typeof(string));
    
            var fROMDATEParameter = fROMDATE.HasValue ?
                new ObjectParameter("FROMDATE", fROMDATE) :
                new ObjectParameter("FROMDATE", typeof(System.DateTime));
    
            var tODATEParameter = tODATE.HasValue ?
                new ObjectParameter("TODATE", tODATE) :
                new ObjectParameter("TODATE", typeof(System.DateTime));
    
            var vENDORTYPEParameter = vENDORTYPE != null ?
                new ObjectParameter("VENDORTYPE", vENDORTYPE) :
                new ObjectParameter("VENDORTYPE", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_VENDOR_GET_Result>("SP_VENDOR_GET", iDParameter, eMPIDParameter, fROMDATEParameter, tODATEParameter, vENDORTYPEParameter);
        }
    
        public virtual int SP_VENDOR_INSERT(string companyName, string address, Nullable<int> deptId, string personInCharge, string contactPerson, string identityCard, string phoneNumber, string email, Nullable<bool> active, string userId, string vendorType)
        {
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var deptIdParameter = deptId.HasValue ?
                new ObjectParameter("DeptId", deptId) :
                new ObjectParameter("DeptId", typeof(int));
    
            var personInChargeParameter = personInCharge != null ?
                new ObjectParameter("PersonInCharge", personInCharge) :
                new ObjectParameter("PersonInCharge", typeof(string));
    
            var contactPersonParameter = contactPerson != null ?
                new ObjectParameter("ContactPerson", contactPerson) :
                new ObjectParameter("ContactPerson", typeof(string));
    
            var identityCardParameter = identityCard != null ?
                new ObjectParameter("IdentityCard", identityCard) :
                new ObjectParameter("IdentityCard", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var vendorTypeParameter = vendorType != null ?
                new ObjectParameter("VendorType", vendorType) :
                new ObjectParameter("VendorType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_VENDOR_INSERT", companyNameParameter, addressParameter, deptIdParameter, personInChargeParameter, contactPersonParameter, identityCardParameter, phoneNumberParameter, emailParameter, activeParameter, userIdParameter, vendorTypeParameter);
        }
    
        public virtual ObjectResult<SP_CONTAINER_GET_Result> SP_CONTAINER_GET(Nullable<int> iD, Nullable<int> mASTERID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var mASTERIDParameter = mASTERID.HasValue ?
                new ObjectParameter("MASTERID", mASTERID) :
                new ObjectParameter("MASTERID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CONTAINER_GET_Result>("SP_CONTAINER_GET", iDParameter, mASTERIDParameter);
        }
    
        public virtual ObjectResult<string> SP_CONTAINER_INSERT(Nullable<int> mASTERID, Nullable<int> vENDORID, string cONTAINERNUM, Nullable<System.DateTime> fROMDATE, Nullable<System.DateTime> tODATE, Nullable<bool> iSIMPORT, string uSERID)
        {
            var mASTERIDParameter = mASTERID.HasValue ?
                new ObjectParameter("MASTERID", mASTERID) :
                new ObjectParameter("MASTERID", typeof(int));
    
            var vENDORIDParameter = vENDORID.HasValue ?
                new ObjectParameter("VENDORID", vENDORID) :
                new ObjectParameter("VENDORID", typeof(int));
    
            var cONTAINERNUMParameter = cONTAINERNUM != null ?
                new ObjectParameter("CONTAINERNUM", cONTAINERNUM) :
                new ObjectParameter("CONTAINERNUM", typeof(string));
    
            var fROMDATEParameter = fROMDATE.HasValue ?
                new ObjectParameter("FROMDATE", fROMDATE) :
                new ObjectParameter("FROMDATE", typeof(System.DateTime));
    
            var tODATEParameter = tODATE.HasValue ?
                new ObjectParameter("TODATE", tODATE) :
                new ObjectParameter("TODATE", typeof(System.DateTime));
    
            var iSIMPORTParameter = iSIMPORT.HasValue ?
                new ObjectParameter("ISIMPORT", iSIMPORT) :
                new ObjectParameter("ISIMPORT", typeof(bool));
    
            var uSERIDParameter = uSERID != null ?
                new ObjectParameter("USERID", uSERID) :
                new ObjectParameter("USERID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_CONTAINER_INSERT", mASTERIDParameter, vENDORIDParameter, cONTAINERNUMParameter, fROMDATEParameter, tODATEParameter, iSIMPORTParameter, uSERIDParameter);
        }
    
        public virtual ObjectResult<string> SP_CONTAINER_UPDATE(Nullable<int> iD, Nullable<int> mASTERID, Nullable<int> vENDORID, string cONTAINERNUM, Nullable<System.DateTime> fROMDATE, Nullable<System.DateTime> tODATE, Nullable<bool> iSIMPORT, string uSERID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var mASTERIDParameter = mASTERID.HasValue ?
                new ObjectParameter("MASTERID", mASTERID) :
                new ObjectParameter("MASTERID", typeof(int));
    
            var vENDORIDParameter = vENDORID.HasValue ?
                new ObjectParameter("VENDORID", vENDORID) :
                new ObjectParameter("VENDORID", typeof(int));
    
            var cONTAINERNUMParameter = cONTAINERNUM != null ?
                new ObjectParameter("CONTAINERNUM", cONTAINERNUM) :
                new ObjectParameter("CONTAINERNUM", typeof(string));
    
            var fROMDATEParameter = fROMDATE.HasValue ?
                new ObjectParameter("FROMDATE", fROMDATE) :
                new ObjectParameter("FROMDATE", typeof(System.DateTime));
    
            var tODATEParameter = tODATE.HasValue ?
                new ObjectParameter("TODATE", tODATE) :
                new ObjectParameter("TODATE", typeof(System.DateTime));
    
            var iSIMPORTParameter = iSIMPORT.HasValue ?
                new ObjectParameter("ISIMPORT", iSIMPORT) :
                new ObjectParameter("ISIMPORT", typeof(bool));
    
            var uSERIDParameter = uSERID != null ?
                new ObjectParameter("USERID", uSERID) :
                new ObjectParameter("USERID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_CONTAINER_UPDATE", iDParameter, mASTERIDParameter, vENDORIDParameter, cONTAINERNUMParameter, fROMDATEParameter, tODATEParameter, iSIMPORTParameter, uSERIDParameter);
        }
    
        public virtual ObjectResult<SP_VENDOR_FIND_Result> SP_VENDOR_FIND(string vALUE, string vENDORTYPE)
        {
            var vALUEParameter = vALUE != null ?
                new ObjectParameter("VALUE", vALUE) :
                new ObjectParameter("VALUE", typeof(string));
    
            var vENDORTYPEParameter = vENDORTYPE != null ?
                new ObjectParameter("VENDORTYPE", vENDORTYPE) :
                new ObjectParameter("VENDORTYPE", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_VENDOR_FIND_Result>("SP_VENDOR_FIND", vALUEParameter, vENDORTYPEParameter);
        }
    
        public virtual ObjectResult<SP_VISITOR_APPLICATION_MASTER_GET_Result> SP_VISITOR_APPLICATION_MASTER_GET(Nullable<int> iD, Nullable<System.DateTime> fROMDATE, Nullable<System.DateTime> tODATE, Nullable<int> aPPLICATIONTYPE, string uSERID, string aPPROVESTATUS)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var fROMDATEParameter = fROMDATE.HasValue ?
                new ObjectParameter("FROMDATE", fROMDATE) :
                new ObjectParameter("FROMDATE", typeof(System.DateTime));
    
            var tODATEParameter = tODATE.HasValue ?
                new ObjectParameter("TODATE", tODATE) :
                new ObjectParameter("TODATE", typeof(System.DateTime));
    
            var aPPLICATIONTYPEParameter = aPPLICATIONTYPE.HasValue ?
                new ObjectParameter("APPLICATIONTYPE", aPPLICATIONTYPE) :
                new ObjectParameter("APPLICATIONTYPE", typeof(int));
    
            var uSERIDParameter = uSERID != null ?
                new ObjectParameter("USERID", uSERID) :
                new ObjectParameter("USERID", typeof(string));
    
            var aPPROVESTATUSParameter = aPPROVESTATUS != null ?
                new ObjectParameter("APPROVESTATUS", aPPROVESTATUS) :
                new ObjectParameter("APPROVESTATUS", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_VISITOR_APPLICATION_MASTER_GET_Result>("SP_VISITOR_APPLICATION_MASTER_GET", iDParameter, fROMDATEParameter, tODATEParameter, aPPLICATIONTYPEParameter, uSERIDParameter, aPPROVESTATUSParameter);
        }
    
        public virtual ObjectResult<string> SP_VISITOR_APPLICATION_MASTER_COPY(Nullable<int> id, Nullable<int> applicationType, string userId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var applicationTypeParameter = applicationType.HasValue ?
                new ObjectParameter("ApplicationType", applicationType) :
                new ObjectParameter("ApplicationType", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_VISITOR_APPLICATION_MASTER_COPY", idParameter, applicationTypeParameter, userIdParameter);
        }
    
        public virtual int SP_VISITOR_WORKINGDAILY_INSERT(Nullable<int> visitorId, string userId, string visitorCard, string remark, Nullable<bool> isCheckIn, Nullable<int> applicationType)
        {
            var visitorIdParameter = visitorId.HasValue ?
                new ObjectParameter("VisitorId", visitorId) :
                new ObjectParameter("VisitorId", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var visitorCardParameter = visitorCard != null ?
                new ObjectParameter("VisitorCard", visitorCard) :
                new ObjectParameter("VisitorCard", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var isCheckInParameter = isCheckIn.HasValue ?
                new ObjectParameter("IsCheckIn", isCheckIn) :
                new ObjectParameter("IsCheckIn", typeof(bool));
    
            var applicationTypeParameter = applicationType.HasValue ?
                new ObjectParameter("ApplicationType", applicationType) :
                new ObjectParameter("ApplicationType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_VISITOR_WORKINGDAILY_INSERT", visitorIdParameter, userIdParameter, visitorCardParameter, remarkParameter, isCheckInParameter, applicationTypeParameter);
        }
    
        public virtual ObjectResult<SP_VISITOR_WORKINGDAILY_GET_DETAIL_Result> SP_VISITOR_WORKINGDAILY_GET_DETAIL(Nullable<int> visitorId)
        {
            var visitorIdParameter = visitorId.HasValue ?
                new ObjectParameter("VisitorId", visitorId) :
                new ObjectParameter("VisitorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_VISITOR_WORKINGDAILY_GET_DETAIL_Result>("SP_VISITOR_WORKINGDAILY_GET_DETAIL", visitorIdParameter);
        }
    
        public virtual ObjectResult<SP_VEHICLE_CHECKINGDAILY_GET_DETAIL_Result> SP_VEHICLE_CHECKINGDAILY_GET_DETAIL(Nullable<int> vehicle)
        {
            var vehicleParameter = vehicle.HasValue ?
                new ObjectParameter("Vehicle", vehicle) :
                new ObjectParameter("Vehicle", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_VEHICLE_CHECKINGDAILY_GET_DETAIL_Result>("SP_VEHICLE_CHECKINGDAILY_GET_DETAIL", vehicleParameter);
        }
    
        public virtual int SP_VEHICLE_CHECKINGDAILY_INSERT(Nullable<int> vehicleId, string userId, string vehicleCard, string remark, Nullable<bool> isCheckIn, string newDriver)
        {
            var vehicleIdParameter = vehicleId.HasValue ?
                new ObjectParameter("VehicleId", vehicleId) :
                new ObjectParameter("VehicleId", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var vehicleCardParameter = vehicleCard != null ?
                new ObjectParameter("VehicleCard", vehicleCard) :
                new ObjectParameter("VehicleCard", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var isCheckInParameter = isCheckIn.HasValue ?
                new ObjectParameter("IsCheckIn", isCheckIn) :
                new ObjectParameter("IsCheckIn", typeof(bool));
    
            var newDriverParameter = newDriver != null ?
                new ObjectParameter("NewDriver", newDriver) :
                new ObjectParameter("NewDriver", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_VEHICLE_CHECKINGDAILY_INSERT", vehicleIdParameter, userIdParameter, vehicleCardParameter, remarkParameter, isCheckInParameter, newDriverParameter);
        }
    
        public virtual int SP_CONTAINER_TRACKINGDAILY_INSERT(Nullable<int> containerId, string userId, Nullable<int> vehicleId, string remark, Nullable<bool> isCheckIn)
        {
            var containerIdParameter = containerId.HasValue ?
                new ObjectParameter("ContainerId", containerId) :
                new ObjectParameter("ContainerId", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var vehicleIdParameter = vehicleId.HasValue ?
                new ObjectParameter("VehicleId", vehicleId) :
                new ObjectParameter("VehicleId", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var isCheckInParameter = isCheckIn.HasValue ?
                new ObjectParameter("IsCheckIn", isCheckIn) :
                new ObjectParameter("IsCheckIn", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CONTAINER_TRACKINGDAILY_INSERT", containerIdParameter, userIdParameter, vehicleIdParameter, remarkParameter, isCheckInParameter);
        }
    
        public virtual ObjectResult<SP_VEHICLE_GET_IN_Result> SP_VEHICLE_GET_IN()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_VEHICLE_GET_IN_Result>("SP_VEHICLE_GET_IN");
        }
    
        public virtual ObjectResult<SP_PASSINGGOODS_DETAIL_GET_FOR_SECURITY_Result> SP_PASSINGGOODS_DETAIL_GET_FOR_SECURITY(Nullable<bool> iSIMPORT, Nullable<System.DateTime> fROMDATE, Nullable<System.DateTime> tODATE, string uSERID)
        {
            var iSIMPORTParameter = iSIMPORT.HasValue ?
                new ObjectParameter("ISIMPORT", iSIMPORT) :
                new ObjectParameter("ISIMPORT", typeof(bool));
    
            var fROMDATEParameter = fROMDATE.HasValue ?
                new ObjectParameter("FROMDATE", fROMDATE) :
                new ObjectParameter("FROMDATE", typeof(System.DateTime));
    
            var tODATEParameter = tODATE.HasValue ?
                new ObjectParameter("TODATE", tODATE) :
                new ObjectParameter("TODATE", typeof(System.DateTime));
    
            var uSERIDParameter = uSERID != null ?
                new ObjectParameter("USERID", uSERID) :
                new ObjectParameter("USERID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PASSINGGOODS_DETAIL_GET_FOR_SECURITY_Result>("SP_PASSINGGOODS_DETAIL_GET_FOR_SECURITY", iSIMPORTParameter, fROMDATEParameter, tODATEParameter, uSERIDParameter);
        }
    
        public virtual ObjectResult<SP_PASSINGGOODS_GET_FOR_SECURITY_Result> SP_PASSINGGOODS_GET_FOR_SECURITY(Nullable<int> iD, Nullable<System.DateTime> fROMDATE, Nullable<System.DateTime> tODATE, string aPPROVESTATUS, string uSERID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var fROMDATEParameter = fROMDATE.HasValue ?
                new ObjectParameter("FROMDATE", fROMDATE) :
                new ObjectParameter("FROMDATE", typeof(System.DateTime));
    
            var tODATEParameter = tODATE.HasValue ?
                new ObjectParameter("TODATE", tODATE) :
                new ObjectParameter("TODATE", typeof(System.DateTime));
    
            var aPPROVESTATUSParameter = aPPROVESTATUS != null ?
                new ObjectParameter("APPROVESTATUS", aPPROVESTATUS) :
                new ObjectParameter("APPROVESTATUS", typeof(string));
    
            var uSERIDParameter = uSERID != null ?
                new ObjectParameter("USERID", uSERID) :
                new ObjectParameter("USERID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PASSINGGOODS_GET_FOR_SECURITY_Result>("SP_PASSINGGOODS_GET_FOR_SECURITY", iDParameter, fROMDATEParameter, tODATEParameter, aPPROVESTATUSParameter, uSERIDParameter);
        }
    
        public virtual ObjectResult<SP_VISITOR_APPLICATION_MASTER_ISSUED_GET_Result> SP_VISITOR_APPLICATION_MASTER_ISSUED_GET(Nullable<System.DateTime> fROMDATE, Nullable<System.DateTime> tODATE, string uSERID)
        {
            var fROMDATEParameter = fROMDATE.HasValue ?
                new ObjectParameter("FROMDATE", fROMDATE) :
                new ObjectParameter("FROMDATE", typeof(System.DateTime));
    
            var tODATEParameter = tODATE.HasValue ?
                new ObjectParameter("TODATE", tODATE) :
                new ObjectParameter("TODATE", typeof(System.DateTime));
    
            var uSERIDParameter = uSERID != null ?
                new ObjectParameter("USERID", uSERID) :
                new ObjectParameter("USERID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_VISITOR_APPLICATION_MASTER_ISSUED_GET_Result>("SP_VISITOR_APPLICATION_MASTER_ISSUED_GET", fROMDATEParameter, tODATEParameter, uSERIDParameter);
        }
    
        public virtual ObjectResult<SP_CONTAINER_TRACKINGDAILY_GET_Result> SP_CONTAINER_TRACKINGDAILY_GET(Nullable<int> applicationMasterId, Nullable<System.DateTime> workdate, string gateId, string userId)
        {
            var applicationMasterIdParameter = applicationMasterId.HasValue ?
                new ObjectParameter("ApplicationMasterId", applicationMasterId) :
                new ObjectParameter("ApplicationMasterId", typeof(int));
    
            var workdateParameter = workdate.HasValue ?
                new ObjectParameter("Workdate", workdate) :
                new ObjectParameter("Workdate", typeof(System.DateTime));
    
            var gateIdParameter = gateId != null ?
                new ObjectParameter("GateId", gateId) :
                new ObjectParameter("GateId", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CONTAINER_TRACKINGDAILY_GET_Result>("SP_CONTAINER_TRACKINGDAILY_GET", applicationMasterIdParameter, workdateParameter, gateIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<SP_CONTAINER_TRACKINGDAILY_GET_DETAIL_Result> SP_CONTAINER_TRACKINGDAILY_GET_DETAIL(Nullable<int> containerId)
        {
            var containerIdParameter = containerId.HasValue ?
                new ObjectParameter("ContainerId", containerId) :
                new ObjectParameter("ContainerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CONTAINER_TRACKINGDAILY_GET_DETAIL_Result>("SP_CONTAINER_TRACKINGDAILY_GET_DETAIL", containerIdParameter);
        }
    
        public virtual ObjectResult<SP_VISITOR_WORKINGDAILY_GET_Result> SP_VISITOR_WORKINGDAILY_GET(Nullable<int> applicationMasterId, Nullable<System.DateTime> workdate, Nullable<bool> isCheckOut, string gateId, Nullable<int> applicationType, string userId, string approvalStatus)
        {
            var applicationMasterIdParameter = applicationMasterId.HasValue ?
                new ObjectParameter("ApplicationMasterId", applicationMasterId) :
                new ObjectParameter("ApplicationMasterId", typeof(int));
    
            var workdateParameter = workdate.HasValue ?
                new ObjectParameter("Workdate", workdate) :
                new ObjectParameter("Workdate", typeof(System.DateTime));
    
            var isCheckOutParameter = isCheckOut.HasValue ?
                new ObjectParameter("IsCheckOut", isCheckOut) :
                new ObjectParameter("IsCheckOut", typeof(bool));
    
            var gateIdParameter = gateId != null ?
                new ObjectParameter("GateId", gateId) :
                new ObjectParameter("GateId", typeof(string));
    
            var applicationTypeParameter = applicationType.HasValue ?
                new ObjectParameter("ApplicationType", applicationType) :
                new ObjectParameter("ApplicationType", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var approvalStatusParameter = approvalStatus != null ?
                new ObjectParameter("ApprovalStatus", approvalStatus) :
                new ObjectParameter("ApprovalStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_VISITOR_WORKINGDAILY_GET_Result>("SP_VISITOR_WORKINGDAILY_GET", applicationMasterIdParameter, workdateParameter, isCheckOutParameter, gateIdParameter, applicationTypeParameter, userIdParameter, approvalStatusParameter);
        }
    
        public virtual ObjectResult<SP_VEHICLE_CHECKINGDAILY_GET_Result> SP_VEHICLE_CHECKINGDAILY_GET(Nullable<int> applicationMasterId, Nullable<System.DateTime> workdate, Nullable<bool> isCheckOut, string gateId, Nullable<int> applicationType, string userId, string approvalStatus)
        {
            var applicationMasterIdParameter = applicationMasterId.HasValue ?
                new ObjectParameter("ApplicationMasterId", applicationMasterId) :
                new ObjectParameter("ApplicationMasterId", typeof(int));
    
            var workdateParameter = workdate.HasValue ?
                new ObjectParameter("Workdate", workdate) :
                new ObjectParameter("Workdate", typeof(System.DateTime));
    
            var isCheckOutParameter = isCheckOut.HasValue ?
                new ObjectParameter("IsCheckOut", isCheckOut) :
                new ObjectParameter("IsCheckOut", typeof(bool));
    
            var gateIdParameter = gateId != null ?
                new ObjectParameter("GateId", gateId) :
                new ObjectParameter("GateId", typeof(string));
    
            var applicationTypeParameter = applicationType.HasValue ?
                new ObjectParameter("ApplicationType", applicationType) :
                new ObjectParameter("ApplicationType", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var approvalStatusParameter = approvalStatus != null ?
                new ObjectParameter("ApprovalStatus", approvalStatus) :
                new ObjectParameter("ApprovalStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_VEHICLE_CHECKINGDAILY_GET_Result>("SP_VEHICLE_CHECKINGDAILY_GET", applicationMasterIdParameter, workdateParameter, isCheckOutParameter, gateIdParameter, applicationTypeParameter, userIdParameter, approvalStatusParameter);
        }
    
        public virtual int SP_VISITOR_LONGTERM_SENDMAIL(Nullable<int> mASTERID, string userId)
        {
            var mASTERIDParameter = mASTERID.HasValue ?
                new ObjectParameter("MASTERID", mASTERID) :
                new ObjectParameter("MASTERID", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_VISITOR_LONGTERM_SENDMAIL", mASTERIDParameter, userIdParameter);
        }
    
        public virtual int SP_VEHICLE_SENDMAIL(Nullable<int> mASTERID, string userId, Nullable<int> type)
        {
            var mASTERIDParameter = mASTERID.HasValue ?
                new ObjectParameter("MASTERID", mASTERID) :
                new ObjectParameter("MASTERID", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_VEHICLE_SENDMAIL", mASTERIDParameter, userIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<SP_REPORT_VISITOR_Result> SP_REPORT_VISITOR(Nullable<int> applicationType, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> workDateFrom, Nullable<System.DateTime> workDateTo, Nullable<int> status)
        {
            var applicationTypeParameter = applicationType.HasValue ?
                new ObjectParameter("ApplicationType", applicationType) :
                new ObjectParameter("ApplicationType", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var workDateFromParameter = workDateFrom.HasValue ?
                new ObjectParameter("WorkDateFrom", workDateFrom) :
                new ObjectParameter("WorkDateFrom", typeof(System.DateTime));
    
            var workDateToParameter = workDateTo.HasValue ?
                new ObjectParameter("WorkDateTo", workDateTo) :
                new ObjectParameter("WorkDateTo", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_REPORT_VISITOR_Result>("SP_REPORT_VISITOR", applicationTypeParameter, fromDateParameter, toDateParameter, workDateFromParameter, workDateToParameter, statusParameter);
        }
    
        public virtual int SP_FORGETCARD_UPDATE(string eMPID, Nullable<System.DateTime> wORKDATE, string tIMEIN, string tIMEOUT, string sECURITYNAME, string tEMPORATYCARD, string gATENUMBER, string rEASON, string rEASONOTHER, Nullable<bool> cHECKIN, Nullable<int> iD)
        {
            var eMPIDParameter = eMPID != null ?
                new ObjectParameter("EMPID", eMPID) :
                new ObjectParameter("EMPID", typeof(string));
    
            var wORKDATEParameter = wORKDATE.HasValue ?
                new ObjectParameter("WORKDATE", wORKDATE) :
                new ObjectParameter("WORKDATE", typeof(System.DateTime));
    
            var tIMEINParameter = tIMEIN != null ?
                new ObjectParameter("TIMEIN", tIMEIN) :
                new ObjectParameter("TIMEIN", typeof(string));
    
            var tIMEOUTParameter = tIMEOUT != null ?
                new ObjectParameter("TIMEOUT", tIMEOUT) :
                new ObjectParameter("TIMEOUT", typeof(string));
    
            var sECURITYNAMEParameter = sECURITYNAME != null ?
                new ObjectParameter("SECURITYNAME", sECURITYNAME) :
                new ObjectParameter("SECURITYNAME", typeof(string));
    
            var tEMPORATYCARDParameter = tEMPORATYCARD != null ?
                new ObjectParameter("TEMPORATYCARD", tEMPORATYCARD) :
                new ObjectParameter("TEMPORATYCARD", typeof(string));
    
            var gATENUMBERParameter = gATENUMBER != null ?
                new ObjectParameter("GATENUMBER", gATENUMBER) :
                new ObjectParameter("GATENUMBER", typeof(string));
    
            var rEASONParameter = rEASON != null ?
                new ObjectParameter("REASON", rEASON) :
                new ObjectParameter("REASON", typeof(string));
    
            var rEASONOTHERParameter = rEASONOTHER != null ?
                new ObjectParameter("REASONOTHER", rEASONOTHER) :
                new ObjectParameter("REASONOTHER", typeof(string));
    
            var cHECKINParameter = cHECKIN.HasValue ?
                new ObjectParameter("CHECKIN", cHECKIN) :
                new ObjectParameter("CHECKIN", typeof(bool));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_FORGETCARD_UPDATE", eMPIDParameter, wORKDATEParameter, tIMEINParameter, tIMEOUTParameter, sECURITYNAMEParameter, tEMPORATYCARDParameter, gATENUMBERParameter, rEASONParameter, rEASONOTHERParameter, cHECKINParameter, iDParameter);
        }
    
        public virtual ObjectResult<SP_REPORT_VEHICLE_Result> SP_REPORT_VEHICLE(Nullable<int> applicationType, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> workDateFrom, Nullable<System.DateTime> workDateTo, Nullable<int> status)
        {
            var applicationTypeParameter = applicationType.HasValue ?
                new ObjectParameter("ApplicationType", applicationType) :
                new ObjectParameter("ApplicationType", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var workDateFromParameter = workDateFrom.HasValue ?
                new ObjectParameter("WorkDateFrom", workDateFrom) :
                new ObjectParameter("WorkDateFrom", typeof(System.DateTime));
    
            var workDateToParameter = workDateTo.HasValue ?
                new ObjectParameter("WorkDateTo", workDateTo) :
                new ObjectParameter("WorkDateTo", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_REPORT_VEHICLE_Result>("SP_REPORT_VEHICLE", applicationTypeParameter, fromDateParameter, toDateParameter, workDateFromParameter, workDateToParameter, statusParameter);
        }
    }
}
